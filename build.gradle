import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile

buildscript {
	dependencies {
		classpath libs.kotlin.gradlePlugin
		classpath libs.dokka.gradlePlugin
		classpath libs.gradleMavenPublishPlugin
	}
	repositories {
		mavenCentral()
	}
}

apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'org.jetbrains.dokka'

group = project.property("GROUP") as String
version = project.property("VERSION_NAME") as String

kotlin {
	explicitApi()

	androidNativeArm32()
	androidNativeArm64()
	androidNativeX64()
	androidNativeX86()

	iosArm32()
	iosArm64()
	iosSimulatorArm64()
	iosX64()

	linuxArm32Hfp()
	linuxArm64()
	linuxX64()

	macosArm64()
	macosX64()

	mingwX64()
	mingwX86()

	js {
		nodejs()
	}

	jvm()

	tvosArm64()
	tvosSimulatorArm64()
	tvosX64()

	wasm32()

	watchosArm32()
	watchosArm64()
	watchosDeviceArm64()
	watchosSimulatorArm64()
	watchosX64()
	watchosX86()

	sourceSets {
		commonTest {
			dependencies {
				implementation libs.kotlin.test
				implementation libs.assertk
			}
		}

		// Implementations using Kotlin stdlib types or the JVM to which the stdlib aliases.
		unspecializedMain {
			dependsOn(commonMain)
		}
		// Implementations which typealias to platform-specific representations.
		specializedMain {
			dependsOn(commonMain)
		}

		// Implementations using Foundation.
		darwinMain {
			dependsOn(specializedMain)
		}
		darwinTest {
			dependsOn(commonTest)
		}

		jsMain {
			dependsOn(specializedMain)
		}
		jvmMain {
			dependsOn(unspecializedMain)
		}
	}

	targets.each { target ->
		if (target.platformType == KotlinPlatformType.native) {
			if (target.name.contains('os')) {
				target.compilations.main.defaultSourceSet.dependsOn(sourceSets.darwinMain)
				target.compilations.test.defaultSourceSet.dependsOn(sourceSets.darwinTest)
			} else {
				target.compilations.main.defaultSourceSet.dependsOn(sourceSets.unspecializedMain)
			}
		}
	}
}

tasks.withType(KotlinJvmCompile).configureEach {
	compilerOptions.jvmTarget = JvmTarget.JVM_1_8
}

tasks.withType(JavaCompile).configureEach {
	sourceCompatibility = JavaVersion.VERSION_1_8.toString()
	targetCompatibility = JavaVersion.VERSION_1_8.toString()
}

tasks.withType(KotlinCompilationTask).configureEach {
	compilerOptions {
		allWarningsAsErrors = true
	}
}

repositories {
	mavenCentral()
}
